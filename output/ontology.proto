
// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

syntax = "proto3";

package clouditor.discovery.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "api/discovery";

message DDoSProtection {
}

message DocumentDatabaseService {
}

message Identity {
}

message TokenBasedAuthentication {
	enabled boolean
	enforced boolean
}

message OSLogging {
}

// This feature is, e.g., available on some VM services to automatically update their software. It ensures that a resource is protected from tampering with its state.
message AutomaticSecurityUpdates {
	enabled boolean
}

message Availability {
	oneof type {
		Backup backup = 101;
		DDoSProtection d_do_s_protection = 102;
		GeoLocation geo_location = 103;
		Redundancy redundancy = 104;
	}
}

message Container {
}

message RoleAssignment {
}

message SecurityFeature {
	oneof type {
		Auditing auditing = 101;
		Authenticity authenticity = 102;
		Authorization authorization = 103;
		Availability availability = 104;
		Confidentiality confidentiality = 105;
		Integrity integrity = 106;
	}
}

message Functionality {
	oneof type {
		HttpEndpoint http_endpoint = 101;
		HttpRequestHandler http_request_handler = 102;
		Operation operation = 103;
	}
}

message Operation {
	oneof type {
		DatabaseOperation database_operation = 101;
		HttpRequest http_request = 102;
		LogOperation log_operation = 103;
		ObjectStorageRequest object_storage_request = 104;
	}
}

message ABAC {
}

message DatabaseOperation {
	oneof type {
		DatabaseConnect database_connect = 101;
		DatabaseQuery database_query = 102;
	}
}

// An file storage service represents the network service that is used to access a list of file storage shares. The storage itself is modelled as a FileStorage. The service has an http endpoint.
message FileStorageService {
}

message Logger {
}

message PasswordBasedAuthentication {
	activated boolean
}

message CertificateBasedAuthentication {
	enabled boolean
}

message ManagedKeyEncryption {
}

message Redundancy {
}

message CloudResource {
	oneof type {
		Account account = 101;
		CICDService c_i_c_d_service = 102;
		Compute compute = 103;
		ContainerOrchestration container_orchestration = 104;
		ContainerRegistry container_registry = 105;
		Identifiable identifiable = 106;
		Image image = 107;
		IoT io_t = 108;
		KeyVault key_vault = 109;
		Networking networking = 110;
		PasswordPolicy password_policy = 111;
		ResourceGroup resource_group = 112;
		Storage storage = 113;
	}
}

// This entity represents a network-based service that can be used to access a particular storage backend. It has multiple subclasses, e.g., for databases or object stores. It has a list of storage resources associated to it.
message StorageService {
	oneof type {
		DatabaseService database_service = 101;
		FileStorageService file_storage_service = 102;
		ObjectStorageService object_storage_service = 103;
	}
}

message PasswordPolicy {
}

message SingleSignOn {
	enabled boolean
}

message VirtualSubNetwork {
}

// This encapsulates the whole (source) code of an application.
message Application {
	programmingLanguage string
}

// describes the actual database or a table in a database
message DatabaseStorage {
}

// A logging-as-a-service offering, e.g. for analyzing logs; has a Storage resource that stores the logs
message LoggingService {
}

message ObjectStorageRequest {
	type string
}

// A Load Balancer may have multiple access restriction features, e.g. a L3 firewall and a WAF
message LoadBalancer {
	url string
}

message HttpServer {
}

// enabled means the resource _can_ be reached via https, while enforced means it _can only_ be reached via https (or http traffic is redirected)
message TransportEncryption {
	algorithm string
	enabled boolean
	enforced boolean
	tlsVersion string
}

// This represents the cloud account as a whole, e.g., an Azure subscription.
message Account {
}

message ApplicationLogging {
}

message WebApp {
}

message BlockStorage {
}

message RBAC {
}

message ResourceGroup {
}

message Resource {
	oneof type {
		Application application = 101;
		CloudResource cloud_resource = 102;
		Document document = 103;
	}
}

message HttpClientLibrary {
}

message Job {
}

message Logging {
	enabled boolean
	oneof type {
		ActivityLogging activity_logging = 101;
		ApplicationLogging application_logging = 102;
		BootLogging boot_logging = 103;
		OSLogging o_s_logging = 104;
		ResourceLogging resource_logging = 105;
	}
}

message Authenticity {
	oneof type {
		CertificateBasedAuthentication certificate_based_authentication = 101;
		TokenBasedAuthentication token_based_authentication = 102;
		NoAuthentication no_authentication = 103;
		OTPBasedAuthentication o_t_p_based_authentication = 104;
		PasswordBasedAuthentication password_based_authentication = 105;
		SingleSignOn single_sign_on = 106;
	}
}

message CICDService {
	oneof type {
		Job job = 101;
		Workflow workflow = 102;
	}
}

message Document {
}

message Integrity {
	oneof type {
		AutomaticSecurityUpdates automatic_security_updates = 101;
		Immutability immutability = 102;
	}
}

message Networking {
	oneof type {
		NetworkInterface network_interface = 101;
		NetworkSecurityGroup network_security_group = 102;
		NetworkService network_service = 103;
		VirtualNetwork virtual_network = 104;
		VirtualSubNetwork virtual_sub_network = 105;
	}
}

message Framework {
	oneof type {
		CloudSDK cloud_s_d_k = 101;
		HttpClientLibrary http_client_library = 102;
		HttpServer http_server = 103;
		Logger logger = 104;
	}
}

// Via the Authenticity relationship, the access type can be specified, e.g. public access (no authentication), password-based, etc.
message HttpEndpoint {
	method string
	path string
	url string
	oneof type {
		ProxiedEndpoint proxied_endpoint = 101;
	}
}

message Authorization {
	oneof type {
		ABAC a_b_a_c = 101;
		AccessRestriction access_restriction = 102;
		RBAC r_b_a_c = 103;
	}
}

message ContainerOrchestration {
	managementUrl string
}

message CustomerKeyEncryption {
	keyUrl string
}

message Compute {
	oneof type {
		Container container = 101;
		Function function = 102;
		VirtualMachine virtual_machine = 103;
		WebApp web_app = 104;
	}
}

message DatabaseConnect {
}

message DeviceProvisioningService {
}

// An HTTP endpoint, that is routed through a (reverse) proxy, e.g. a load balancer.
message ProxiedEndpoint {
}

// Analyzes the activity of a NetworkService (which includes DatabaseServices).
// Scope contains the resource ID of the protected resource.
message AnomalyDetection {
	enabled boolean
}

message AtRestEncryption {
	algorithm string
	enabled boolean
	keyUrl string
	oneof type {
		CustomerKeyEncryption customer_key_encryption = 101;
		ManagedKeyEncryption managed_key_encryption = 102;
	}
}

// A LogOperation is used by an application
message LogOperation {
}

message KeyVault {
}

message NetworkInterface {
}

message ObjectStorage {
}

message VirtualMachine {
}

message FileStorage {
}

message HttpRequestHandler {
	path string
}

message Immutability {
	enabled boolean
}

// A WAF is a L7 firewall that includes L3 capabilities
message WebApplicationFirewall {
	enabled boolean
}

// RetentionPeriod in hours
message Backup {
	enabled boolean
}

message CloudSDK {
}

message NoAuthentication {
}

message L3Firewall {
	enabled boolean
	inbound boolean
	restrictedPorts string
}

// analyzes the activity within a Compute resource
message MalwareProtection {
	enabled boolean
}

message MessagingHub {
}

// An object storage service represents the network service that is used to access a list of object storage containers. The storage itself is modelled as a ObjectStorage. The service has an http endpoint.
message ObjectStorageService {
}

message EncryptionInUse {
	enabled boolean
}

message Function {
}

message BootLogging {
}

message ContainerRegistry {
}

message KeyValueDatabaseService {
}

// A NetworkService is an application (on the network layer) running on a Compute resource. It provides access to a resource
message NetworkService {
	oneof type {
		LoadBalancer load_balancer = 101;
		LoggingService logging_service = 102;
		StorageService storage_service = 103;
	}
}

message AccessRestriction {
	oneof type {
		Firewall firewall = 101;
	}
}

message NetworkSecurityGroup {
}

message VMImage {
}

message ActivityLogging {
}

message Image {
	oneof type {
		ContainerImage container_image = 101;
		VMImage v_m_image = 102;
	}
}

message Workflow {
}

message HttpRequest {
}

message VirtualNetwork {
}

message Identifiable {
	activated boolean
	oneof type {
		Identity identity = 101;
		RoleAssignment role_assignment = 102;
	}
}

message OTPBasedAuthentication {
	activated boolean
}

message RelationalDatabaseService {
}

message Firewall {
	oneof type {
		L3Firewall l3_firewall = 101;
		WebApplicationFirewall web_application_firewall = 102;
	}
}

message Auditing {
	oneof type {
		AnomalyDetection anomaly_detection = 101;
		Logging logging = 102;
		MalwareProtection malware_protection = 103;
	}
}

message ContainerImage {
}

message Storage {
	oneof type {
		BlockStorage block_storage = 101;
		DatabaseStorage database_storage = 102;
		FileStorage file_storage = 103;
		ObjectStorage object_storage = 104;
	}
}

message Confidentiality {
	oneof type {
		AtRestEncryption at_rest_encryption = 101;
		EncryptionInUse encryption_in_use = 102;
		Key key = 103;
		TransportEncryption transport_encryption = 104;
	}
}

message DatabaseQuery {
	modify boolean
}

// This class represents a database service. For example, a postgres SQL server would be modelled as a database service (with a host and IP) and the individual tables or collections would be modelled as a DatabaseStorage entity.
message DatabaseService {
	oneof type {
		DocumentDatabaseService document_database_service = 101;
		KeyValueDatabaseService key_value_database_service = 102;
		RelationalDatabaseService relational_database_service = 103;
	}
}

message ResourceLogging {
}

message GeoLocation {
	region string
}

message IoT {
	oneof type {
		DeviceProvisioningService device_provisioning_service = 101;
		MessagingHub messaging_hub = 102;
	}
}

message Key {
	enabled boolean
}
