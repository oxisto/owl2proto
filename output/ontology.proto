
// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

syntax = "proto3";

package clouditor.discovery.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "api/discovery";

message NetworkService {
	oneof type {
		LoadBalancer load_balancer = 101;
		LoggingService logging_service = 102;
		StorageService storage_service = 103;
	}
}

message Authorization {
	oneof type {
		ABAC a_b_a_c = 101;
		AccessRestriction access_restriction = 102;
		RBAC r_b_a_c = 103;
	}
}

message Image {
	oneof type {
		ContainerImage container_image = 101;
		VMImage v_m_image = 102;
	}
}

message Functionality {
	oneof type {
		HttpEndpoint http_endpoint = 101;
		HttpRequestHandler http_request_handler = 102;
		Operation operation = 103;
	}
}

message AtRestEncryption {
	oneof type {
		CustomerKeyEncryption customer_key_encryption = 101;
		ManagedKeyEncryption managed_key_encryption = 102;
	}
}

message DatabaseOperation {
	oneof type {
		DatabaseConnect database_connect = 101;
		DatabaseQuery database_query = 102;
	}
}

message StorageService {
	oneof type {
		DatabaseService database_service = 101;
		FileStorageService file_storage_service = 102;
		ObjectStorageService object_storage_service = 103;
	}
}

message IoT {
	oneof type {
		DeviceProvisioningService device_provisioning_service = 101;
		MessagingHub messaging_hub = 102;
	}
}

message DatabaseService {
	oneof type {
		DocumentDatabaseService document_database_service = 101;
		KeyValueDatabaseService key_value_database_service = 102;
		RelationalDatabaseService relational_database_service = 103;
	}
}

message Storage {
	oneof type {
		BlockStorage block_storage = 101;
		DatabaseStorage database_storage = 102;
		FileStorage file_storage = 103;
		ObjectStorage object_storage = 104;
	}
}

message Authenticity {
	oneof type {
		CertificateBasedAuthentication certificate_based_authentication = 101;
		JwtBasedAuthentication jwt_based_authentication = 102;
		NoAuthentication no_authentication = 103;
		OTPBasedAuthentication o_t_p_based_authentication = 104;
		PasswordBasedAuthentication password_based_authentication = 105;
		SingleSignOn single_sign_on = 106;
	}
}

message Compute {
	oneof type {
		Container container = 101;
		Function function = 102;
		VirtualMachine virtual_machine = 103;
		WebApp web_app = 104;
	}
}

message HttpEndpoint {
	oneof type {
		ProxiedEndpoint proxied_endpoint = 101;
	}
}

message SecurityFeature {
	oneof type {
		Auditing auditing = 101;
		Authenticity authenticity = 102;
		Authorization authorization = 103;
		Availability availability = 104;
		Confidentiality confidentiality = 105;
		Integrity integrity = 106;
	}
}

message Identifiable {
	oneof type {
		Identity identity = 101;
		RoleAssignment role_assignment = 102;
	}
}

message Operation {
	oneof type {
		DatabaseOperation database_operation = 101;
		HttpRequest http_request = 102;
		LogOutput log_output = 103;
		ObjectStorageRequest object_storage_request = 104;
	}
}

message Networking {
	oneof type {
		NetworkInterface network_interface = 101;
		NetworkSecurityGroup network_security_group = 102;
		NetworkService network_service = 103;
		VirtualNetwork virtual_network = 104;
		VirtualSubNetwork virtual_sub_network = 105;
	}
}

message CloudResource {
	oneof type {
		Account account = 101;
		CICDService c_i_c_d_service = 102;
		Compute compute = 103;
		ContainerOrchestration container_orchestration = 104;
		ContainerRegistry container_registry = 105;
		Identifiable identifiable = 106;
		Image image = 107;
		IoT io_t = 108;
		KeyVault key_vault = 109;
		Networking networking = 110;
		PasswordPolicy password_policy = 111;
		ResourceGroup resource_group = 112;
		Storage storage = 113;
	}
}

message Logging {
	oneof type {
		ActivityLog activity_log = 101;
		ApplicationLog application_log = 102;
		BootLog boot_log = 103;
		OSLog o_s_log = 104;
		ResourceLogging resource_logging = 105;
	}
}

message  {
	oneof type {
		BaseResource base_resource = 101;
		Framework framework = 102;
		Functionality functionality = 103;
		SecurityFeature security_feature = 104;
	}
}

message BaseResource {
	oneof type {
		Application application = 101;
		CloudResource cloud_resource = 102;
		Document document = 103;
	}
}

message CICDService {
	oneof type {
		Job job = 101;
		Workflow workflow = 102;
	}
}

message AccessRestriction {
	oneof type {
		Firewall firewall = 101;
	}
}

message Auditing {
	oneof type {
		AnomalyDetection anomaly_detection = 101;
		Logging logging = 102;
		MalwareProtection malware_protection = 103;
	}
}

message Integrity {
	oneof type {
		AutomaticUpdates automatic_updates = 101;
		Immutability immutability = 102;
	}
}

message Framework {
	oneof type {
		CloudSDK cloud_s_d_k = 101;
		HttpClientLibrary http_client_library = 102;
		HttpServer http_server = 103;
		Logger logger = 104;
	}
}

message Confidentiality {
	oneof type {
		AtRestEncryption at_rest_encryption = 101;
		EncryptionInUse encryption_in_use = 102;
		Key key = 103;
		TransportEncryption transport_encryption = 104;
	}
}

message Firewall {
	oneof type {
		L3Firewall l3_firewall = 101;
		WebApplicationFirewall web_application_firewall = 102;
	}
}

message Availability {
	oneof type {
		Backup backup = 101;
		DDosProtection d_dos_protection = 102;
		GeoLocation geo_location = 103;
		Redundancy redundancy = 104;
	}
}

